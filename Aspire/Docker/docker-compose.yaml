x-postgres-common:
  &postgres-common
  image: postgres:16-alpine
  user: postgres
  networks:
    - "mynetwork"
  restart: no
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  mongo-1:
    container_name: 'mongo-1'
    entrypoint: >
      /bin/bash -c '
      openssl rand -base64 756 > /data/keyfile.key &&
      chmod 400 /data/keyfile.key &&
      chown mongodb:mongodb /data/keyfile.key &&
      /usr/local/bin/docker-entrypoint.sh mongod --replSet rs0 --keyFile /data/keyfile.key --bind_ip_all'
    image: 'mongo:latest'
    ports:
      - 127.0.10.1:27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=sa
      - MONGO_INITDB_ROOT_PASSWORD=Password123
      - MONGO_INITDB_DATABASE=myDatabase
    volumes:
      - 'mongo1data:/data/db'
      - 'mongo1config:/data/configdb'
      - 'sharedconfig:/data'
    healthcheck:
      test: mongosh
        -u $${MONGO_INITDB_ROOT_USERNAME}
        -p $${MONGO_INITDB_ROOT_PASSWORD}
        --eval "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo-1:27017',priority:1},{_id:1,host:'mongo-2:27017',priority:0.5},{_id:2,host:'mongo-3:27017',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    networks:
      - "mynetwork"
    restart: unless-stopped

  mongo-2:
    container_name: "mongo-2"
    image: 'mongo:latest'
    ports:
      - 127.0.10.2:27017:27017
    volumes:
      - 'mongo2data:/data/db'
      - 'mongo2config:/data/configdb'
      - 'sharedconfig:/data'
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--keyFile", "/data/keyfile.key"]
    networks:
      - "mynetwork"
    restart: unless-stopped

  mongo-3:
    container_name: 'mongo-3'
    image: 'mongo:latest'
    ports:
      - 127.0.10.3:27017:27017
    volumes:
      - 'mongo3data:/data/db'
      - 'mongo3config:/data/configdb'
      - 'sharedconfig:/data'
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--keyFile", "/data/keyfile.key"]
    networks:
      - "mynetwork"
    restart: unless-stopped

  postgres_primary:
    <<: *postgres-common
    container_name: pg-1
    ports:
      - 127.0.11.1:5432:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - acore_pgdata:/var/lib/postgresql/data

  postgres_replica:
    <<: *postgres-common
    container_name: pg-2
    ports:
      - 127.0.11.2:5432:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      rm /var/lib/postgresql/data -r
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    volumes:
      - acore_pgdata_replica:/var/lib/postgresql/data
    depends_on:
      - postgres_primary
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pg-admin
    restart: no
    ports:
      - 127.0.11.100:5555:5555
    environment:
      PGADMIN_DEFAULT_EMAIL: user@user.com
      PGADMIN_DEFAULT_PASSWORD: password1234.
      PGADMIN_LISTEN_PORT: 5555
    volumes:
      - acore_pgadmin:/var/lib/pgadmin
    networks:
      - "mynetwork"
  
  redis:
    image: redis:latest
    container_name: redis
    restart: no
    ports:
      - '127.0.12.1:6379:6379'
    environment:
      REDIS_PASSWORD: password
    volumes:
      - acore-rediscache:/data
    networks:
      - "mynetwork"
      
  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    restart: no
    ports:
      - "127.0.12.1:5540:5540"
    volumes:
      - acore-redisinsight:/data
    networks:
      - "mynetwork"
      
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "127.0.13.1:5672:5672"     # RabbitMQ messaging port
      - "127.0.13.1:15672:15672"   # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - "mynetwork"

volumes:
  mongo1data:
  mongo1config:
  mongo2data:
  mongo2config:
  mongo3data:
  mongo3config:
  sharedconfig:
  acore_pgdata:
  acore_pgadmin:
  acore_pgdata_replica:
  acore-rediscache:
  acore-redisinsight:
  rabbitmq_data:
    
networks:
  mynetwork:
    driver: bridge